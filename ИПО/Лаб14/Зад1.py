class Circus:
    def __init__(self, название, город, дата_премьеры, период_проведения, цена_билета, автор, жанр, количество_актеров):
        self.название = название
        self.город = город
        self.дата_премьеры = дата_премьеры
        self.период_проведения = период_проведения
        self.цена_билета = цена_билета
        self.автор = автор
        self.жанр = жанр
        self.количество_актеров = количество_актеров

    def __str__(self):
        return f"Цирк: {self.название}, Город: {self.город}, Дата премьеры: {self.дата_премьеры}, Период проведения: {self.период_проведения}, Цена билета: {self.цена_билета}, Автор: {self.автор}, Жанр: {self.жанр}, Количество актеров: {self.количество_актеров}"

class Acrobatic_performances(Circus):
    def __init__(self, название, город, дата_премьеры, период_проведения, цена_билета, автор, жанр, количество_актеров, тип_акробатики, инвентарь):
        super().__init__(название, город, дата_премьеры, период_проведения, цена_билета, автор, жанр, количество_актеров)
        self.тип_акробатики = тип_акробатики
        self.инвентарь = инвентарь

    def __str__(self):
        return f"Акробатические представления: {self.название}, Город: {self.город}, Дата премьеры: {self.дата_премьеры}, Период проведения: {self.период_проведения}, Цена билета: {self.цена_билета}, Автор: {self.автор}, Жанр: {self.жанр}, Количество актеров: {self.количество_актеров}, Тип акробатики: {self.тип_акробатики}, Инвентарь: {self.инвентарь}"

class Training(Circus):
    def __init__(self, название, город, дата_премьеры, период_проведения, цена_билета, автор, жанр, количество_актеров, вид_дрессировки, количество_животных):
        super().__init__(название, город, дата_премьеры, период_проведения, цена_билета, автор, жанр, количество_актеров)
        self.вид_дрессировки = вид_дрессировки
        self.количество_животных = количество_животных

    def __str__(self):
        return f"Дрессировка: {self.название}, Город: {self.город}, Дата премьеры: {self.дата_премьеры}, Период проведения: {self.период_проведения}, Цена билета: {self.цена_билета}, Автор: {self.автор}, Жанр: {self.жанр}, Количество актеров: {self.количество_актеров}, Вид дрессировки: {self.вид_дрессировки}, Количество животных: {self.количество_животных}"

class Magic_tricks(Circus):
    def __init__(self, название, город, дата_премьеры, период_проведения, цена_билета, автор, жанр, количество_актеров, вид_фокусов, инвентарь):
        super().__init__(название, город, дата_премьеры, период_проведения, цена_билета, автор, жанр, количество_актеров)
        self.вид_фокусов = вид_фокусов
        self.инвентарь = инвентарь

    def __str__(self):
        return f"Фокусы: {self.название}, Город: {self.город}, Дата премьеры: {self.дата_премьеры}, Период проведения: {self.период_проведения}, Цена билета: {self.цена_билета}, Автор: {self.автор}, Жанр: {self.жанр}, Количество актеров: {self.количество_актеров}, Вид фокусов: {self.вид_фокусов}, Инвентарь: {self.инвентарь}"

# Создание экземпляров классов
acro = Acrobatic_performances("Акробатика в воздухе", "Москва", "01.01.2022", "01.01.2022 - 31.12.2022", 2000, "Иванов И.И.", "Акробатика", 10, "силовая акробатика", "трапеция")
training = Training("Цирк с тиграми", "Санкт-Петербург", "01.02.2022", "01.02.2022 - 31.12.2022", 2500, "Петров П.П.", "Дрессировка", 5, "хищники", 3)
focus = Magic_tricks("Магия и иллюзии", "Казань", "01.03.2022", "01.03.2022 - 31.12.2022", 1500, "Сидоров С.С.", "Фокусы", 1, "иллюзия", "карты")

print(acro)
print(training)
print(focus)
